import java.nio.file.Path
import java.nio.file.Paths

val moshi_version = "1.12.0"
val mapdb_version = "3.0.8"
val logback_version = "1.2.6"
val pf4j_version = "3.6.0"
val humanize_version = "1.2.2"
val antlr_version = "4.9.2"
val argparse4j_version = "0.9.0"
val natty_version = "0.13"
val coroutines_version = "1.5.2-native-mt"

val pluginsDir: Path = Paths.get(System.getProperty("user.home"), ".convergence", "plugins")

plugins {
    kotlin("jvm") version "1.5.31"
    id("application")
    antlr
    id("com.github.johnrengelman.shadow") version "5.2.0"
}

group = "convergence"
version = "1.0-SNAPSHOT"

description = """Convergence Bot"""


repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
    }
}

dependencies {
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version")

    implementation("com.joestelmach:natty:$natty_version")
    implementation("net.sourceforge.argparse4j:argparse4j:$argparse4j_version")
    implementation("com.github.mfornos:humanize-slim:$humanize_version")
    antlr("org.antlr:antlr4:$antlr_version")
    implementation("ch.qos.logback:logback-classic:$logback_version")

    implementation("com.squareup.moshi:moshi-kotlin:$moshi_version")
    implementation("com.squareup.moshi:moshi-adapters:$moshi_version")

    implementation("org.mapdb:mapdb:$mapdb_version")

    implementation("org.pf4j:pf4j:$pf4j_version")
}

// here we define the tasks which will build the plugins in the subprojects
subprojects {
    repositories {
        mavenCentral()
    }
    // if the variable definitions are put here they are resolved for each subproject
    val pluginId: String by project
    val pluginClass: String by project
    val pluginProvider: String by project

    val project = this
    // we have to apply the gradle jvm plugin, because it provides the jar and build tasks
    apply(plugin = "org.jetbrains.kotlin.jvm")

    // the plugin task will put the files into a zip file
    tasks.register<Jar>("plugin") {
        archiveBaseName.set("plugin-${pluginId}")

        // first taking the classes generated by the jar task
        into("classes") {
            with(tasks.named<Jar>("jar").get())
        }
        // and then we also need to include any libraries that are needed by the plugin
        dependsOn(configurations.runtimeClasspath)
        into("lib") {
            from({
                configurations.runtimeClasspath.get().filter { it.name.endsWith("jar") }
            })
        }
        archiveExtension.set("zip")
    }

    // the assemblePlugin will copy the zip file into the common plugins directory
    tasks.register<Copy>("assemblePlugin") {
        from(project.tasks.named("plugin"))
        into(pluginsDir)
    }

    // for the jar task we have to set the plugin properties, so they can be written to the manifest
    tasks.named<Jar>("jar") {
        manifest {
            attributes["Plugin-Class"] = pluginClass
            attributes["Plugin-Id"] = pluginId
            attributes["Plugin-Version"] = archiveVersion
            attributes["Plugin-Provider"] = pluginProvider
        }
    }

    tasks.named("build") {
        dependsOn(tasks.named("plugin"))
    }

    dependencies {
        implementation("org.pf4j:pf4j:$pf4j_version")
        implementation("com.squareup.moshi:moshi-kotlin:$moshi_version")
        implementation("com.squareup.moshi:moshi-adapters:$moshi_version")
        implementation(rootProject)
    }
}

sourceSets.main {
    withConvention(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet::class) {
        kotlin.srcDirs("src")
        java.srcDirs("src/main/gen/convergence")
    }
    resources.srcDir("resources")
}

sourceSets.test {
    withConvention(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet::class) {
        kotlin.srcDirs("test/kotlin")
    }
}

tasks.compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

tasks.compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

application {
    mainClass.set("convergence.core")
}


tasks.register<Copy>("assemblePlugins") {
    dependsOn(subprojects.map { it.tasks.named("assemblePlugin") })
}

tasks.register<Copy>("copyBot") {
    dependsOn("assemblePlugins")
    from("./build/libs/")
    into(Paths.get(System.getProperty("user.home"), ".convergence"))
}

tasks.named<JavaExec>("run") {
    standardInput = System.`in`
    dependsOn("buildDependents")
}

tasks.named<Task>("buildDependents") {
    finalizedBy("copyBot")
}

tasks.wrapper {
    gradleVersion = "7.0"
}

tasks {
    "build" {
        dependsOn(named("assemblePlugins"))
    }
}
