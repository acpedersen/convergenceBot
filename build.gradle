import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'application'

group = 'convergence'
version = '1.0-SNAPSHOT'

description = """convergence bot"""

sourceCompatibility = 1.5
targetCompatibility = 1.5
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

ext.kotlin_version = '1.3.40'

repositories {
    jcenter()
    maven { url "http://repo.maven.apache.org/maven2" }
    maven { url "https://kotlin.bintray.com/kotlinx" }
    mavenCentral()
}
dependencies {
    testCompile group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit', version:"$kotlin_version"
    compile 'com.beust:klaxon:3.0.1'
    runtime "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "com.joestelmach:natty:0.11"
    compile "org.xeustechnologies:jcl-core:2.8"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime:+"
    compile group: 'net.sourceforge.argparse4j', name: 'argparse4j', version: '0.8.1'
    compile group: 'com.github.mfornos', name: 'humanize-slim', version: '1.2.2'
    compile group: 'com.beust', name: 'klaxon', version: '5.0.2'
    //compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'maven'
    dependencies {
        compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version:"$kotlin_version"
        testCompile group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit', version:"$kotlin_version"
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime:+"
        compile rootProject
    }
    repositories {
        jcenter()
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url "https://kotlin.bintray.com/kotlinx" }
        mavenCentral()
    }
    buildscript {
        repositories {
            mavenCentral()
            jcenter()
        }
        dependencies {
            classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
            classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        }
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}

buildscript {
    ext.kotlin_version = '1.3.40'

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}

apply plugin: 'kotlinx-serialization'

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

mainClassName = 'convergence.core'
jar {
    manifest {
        attributes 'Main-Class': "$mainClassName"
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task copyJar {
    Files.createDirectories(Paths.get(System.getProperty("user.home"), ".convergence", "plugins"))
    for (jar in projectDir.toPath().resolve("./build/libs/").toFile().listFiles())
        if (jar.name.contains("Plugin"))
            Files.copy(jar.toPath(), Paths.get(System.getProperty("user.home"), ".convergence", "plugins", jar.name), StandardCopyOption.REPLACE_EXISTING)
        else
            Files.copy(jar.toPath(), Paths.get(System.getProperty("user.home"), ".convergence", jar.name), StandardCopyOption.REPLACE_EXISTING)
}



run {
    standardInput = System.in
}
run.dependsOn(buildDependents)
run.dependsOn(jar)
jar.finalizedBy(buildDependents)
buildDependents.finalizedBy(copyJar)
run.dependsOn(copyJar)
